import GLConfig from 'nanogl-state/config';
import ProgramCache from './program-cache';
import Input from './input';
import Flag from './flag';
import Precision from './shader-precision';
import Version from './shader-version';
import ChunksList from './chunks-tree';
import { GLContext } from 'nanogl/types';
import IBL from './ibl';
import LightSetup from './light-setup';
import Node from 'nanogl-node';
import Camera from 'nanogl-camera';
import { ICameraLens } from 'nanogl-camera/ICameraLens';
import Program from 'nanogl/program';
import { GammaModeEnum } from './gamma-mode-enum';
export default class StandardMaterial {
    ibl: IBL | null;
    prg: Program | null;
    _prgcache: ProgramCache;
    _mask: number;
    inputs: ChunksList;
    version: Version;
    precision: Precision;
    shaderid: Flag;
    iAlbedo: Input;
    iSpecular: Input;
    iGloss: Input;
    iNormal: Input;
    iOcclusion: Input;
    iCavity: Input;
    iCavityStrength: Input;
    iEmissive: Input;
    iEmissiveScale: Input;
    iFresnel: Input;
    iGamma: Input;
    iExposure: Input;
    conserveEnergy: Flag;
    perVertexIrrad: Flag;
    glossNearest: Flag;
    useDerivatives: Flag;
    gammaMode: GammaModeEnum;
    config: GLConfig;
    _vertSrc: string;
    _fragSrc: string;
    constructor(gl: GLContext);
    setIBL(ibl: IBL): void;
    setLightSetup(setup: LightSetup): void;
    prepare(node: Node, camera: Camera<ICameraLens>): void;
    _isDirty(): boolean;
    compile(): void;
}
